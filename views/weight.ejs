<%- include("partials/header_weight") %>
<div class= "container centered">
	<div class = "row">
		<div class="col-10" style="width:100%;">
			<div class="chartjs-size-monitor chartjs-size-monitor-expand chartjs-size-monitor-shrink">
			</div>
			<canvas id="myChart"  class="chartjs-render-monitor"></canvas>
		</div>
		<div class="col-2 row align-items-center" >
			<div class="list-group">
				<div class="btn-group" role="group">
					<button type="button" class="btn btn-secondary" id="backwardBtn">Previous</button>
					<button type="button" class="btn btn-secondary" id="forwardBtn">Next</button>
				</div>
				<div class="btn-group-vertical list-group-item" role="group" style="padding: 0;">
					<button class="btn btn-secondary btn" id="weekBtn">Week</button>
				    <button class="btn btn-secondary btn" id="monthBtn">Month</button>
				    <button class="btn btn-secondary btn" id="yearBtn">Year</button>
				</div>
				<div class="list-group-item">
					<form action='' id='form2' method='POST' class="row align-items-center">
						<div>
							<label for="date" >Enter Date:
						    <input type="date" name="date" id="form2_date" required pattern = "\d{4}/\d{2}/\d{2}" style="width: 100%;">
						     <span class="validity"></span>
						    </label>
						</div>
						<div>
							<label for="weight"> Body Weight: 
							<input type="number" name="weight" id="form2_weight">
						    </label>
						    <input id="timeTracker_2" type="hidden" name="timeTracker"> </input>
						    <input id="timeFrame_2" type="hidden" name="timeFrame"> </input>
						</div>
						<div style="width: 100%; text-align: center;">
							<button class="btn btn-outline-primary" onclick='add()'>Submit</button>
						</div>
					</form>
			    </div>
			</div>
		</div>
	</div>
</div>
<!-- <p> <%= history %></p> -->
<!-- <script type="text/javascript" src="chart.js"></script> -->
<script type="text/javascript">
const standardFormat = 'YYYY/MM/DD';
const personHistory = initializeHistory(history);
console.log(personHistory);
let records = personHistory.records;
const lastTimeTracker = personHistory.timeTracker;
const lastTimeFrame = personHistory.timeFrame;
//change the String format of date to align with YYYY/MM/DD
records.forEach(function(record){
	record.date = moment(record.date).format(standardFormat);
});
records.sort(recordsComparator);
const ctx = document.getElementById("myChart").getContext('2d');
const weekBtnBack = document.getElementById("flickWeeksBack");
const weekBtnForward = document.getElementById("flickWeeksForward");

const timeFrames = ['week', 'month', 'year'];
let timeTracker = (lastTimeTracker === null)? current(): lastTimeTracker;
let currentFrame = (lastTimeFrame === null)? timeFrames[0] : lastTimeFrame;
	
// let initialData = findRange(current(), 'week');
let initialData = findRange(timeTracker, currentFrame);
let initialWeights = [];
let initialDates = [];
initialData.forEach(function(data){
   initialWeights.push(data.weight);
   initialDates.push(data.date);
});

//Generate data for testing
// records = generateTestData('2020-06-02', 180, 180);
//USES INITIALLY GENERATED DATASET FOR TESTING, TO BE REMOVED LATER
let displayChart = draw(moment().format(standardFormat));

backwardBtn.addEventListener('click', function(){
	timeTracker = moment(timeTracker,'YYYY/MM/DD').add(-1, currentFrame).format(standardFormat);
	flickPlot(timeTracker, currentFrame, 0);
});
forwardBtn.addEventListener('click', function(){
    timeTracker = moment(timeTracker,'YYYY/MM/DD').add(1, currentFrame).format(standardFormat);
	flickPlot(timeTracker, currentFrame, 0);
});
weekBtn.addEventListener('click', function(){
	currentFrame = timeFrames[0];
	flickPlot(timeTracker, 'week', 0); //TO BE CHANGED, FOR TESTING NOW
});
monthBtn.addEventListener('click', function(){
	currentFrame = timeFrames[1];
	flickPlot(timeTracker, 'month', 0);
});
yearBtn.addEventListener('click', function(){
	currentFrame = timeFrames[2];
	flickPlot(timeTracker, 'year', 0); //TO BE CHANGED, FOR TESTING NOW
});
	
// function passParam(){
// 	document.getElementById("timeTracker_1").value = timeTracker;
// 	document.getElementById("timeFrame_1").value = currentFrame;
// }

function initializeHistory(history){
	const blankHistory = {
		records: [],
		timeTracker: null,
		timeFrame: null
	     };
	const transfer = <%- JSON.stringify(history) %>;
	return (transfer!== null)?transfer: blankHistory;
}
	
function add(){
	const form2_date = document.getElementById("form2_date").value;
	const form2_weight = document.getElementById("form2_weight").value;
	document.getElementById("timeTracker_2").value = timeTracker;
	document.getElementById("timeFrame_2").value = currentFrame;
	const submitId = checkDuplication(form2_date, form2_weight);
	const submitRoute = (submitId === null)? "weight/single" : "weight/single/" + submitId;
	// console.log("route:" + submitRoute + " timeTracker " + timeTracker + "submitID " + submitID);
	document.getElementById("form2").action = submitRoute;
}

//check whether date has existed in records, return the corresponding id if it does, null otherwise
function checkDuplication(date, weight){
	const dateInFormat = moment(date).format(standardFormat);
	for(record of records){
		if(record.date === dateInFormat){
			return record._id;
			break;
		}
	}
	return null;
}

//ONLY FOR TESTING, TO BE REMOVED LATER
function initialFigure(time){
	let config = {
	type: 'bar',
	data: {
					labels: initialDates,
		datasets: [{
					label: 'Body Weight',
					backgroundColor: "red",
					borderColor: "red",
					fill: false,
					data: initialWeights
				}]
	},
	options: {  
		        spanGaps: true,
				title: {
					text: 'Chart.js Time Scale'
				},
                scales:{
                	yAxes: [{
                        ticks: {
                            beginAtZero:true
                        }
                    }]
                }
			}
    };
	return config;
}

function newDate(days) {
	return moment().add(days, 'd').format('MMM DD');
}
		
function moveDate(day, dis, format){
	return moment(day, 'YYYY/MM/DD').add(dis, 'day').format(format);
}

function randomScalingFactor(){
	return getRandomInt(30);
}

function getRandomInt(max) {
    return Math.floor(Math.random() * Math.floor(max));
}

//time must be of format YYYY-MM-DD
function draw(time){
	return new Chart(ctx, initialFigure(time));
}

//randomly picks a date between start and start+span, note here start and end
//strings of format 'MM/DD/YYY'
function randomDate(start, span){
    return moment(start, 'YYYY/MM/DD').add(getRandomInt(span), 'day').format('YYYY/MM/DD');
}

//returns an array of strings that represents dates, bounded from above by size 
function generateTestData(start, span, size){
    let testDates = new Set();
    for(i=0; i<size; i++)
    	testDates.add(randomDate(start, span));
    let testDatesArray = Array.from(testDates);
    
    let testData = [];
    for(i=0; i<testDatesArray.length; i++)
    	testData.push({date: testDatesArray[i], weight: getRandomInt(90)});
    return testData;
}

//the format we get is YYYY-MM-DD
function recordsComparator(recordA, recordB){
     return moment(recordA.date).isAfter(recordB.date)? 1:-1;
}

function datesSort(dateA, dateB){
	return moment(dateA).isAfter(dateB)?1:-1;
}

/*find an array of training data within in the same range as the given date,
e.g. 2020-08-20 and range 'month' finds all data whose time is also 2020-08
range could be 'year'/'month'/'week'. The returned array is populated with 
users' training data of that time period, weight could be null if the user 
had no data on that date*/
function findRange(date, range){
	const targetParam = [moment(date).year(), moment(date).month(), moment(date).week()];
	let daysInTargetRange = [];
	const rangeFactor = (range === 'week')? 7:(range === 'month'? 31: 366);
	//****************** THIS IS JUST FOR TEST, TO BE CORRECTED LATER
	for(i=0; i<rangeFactor; i++){
		const after = moveDate(date, i, standardFormat);
		if(range === 'week'){ 
			if(!pushOnCondition(daysInTargetRange, after, 2, targetParam))
				break;
		} else if(range === 'month'){
			if(!pushOnCondition(daysInTargetRange, after, 1, targetParam))
				break;
		} else if(range === 'year'){
			if(!pushOnCondition(daysInTargetRange, after, 0, targetParam))
				break;
		}
	}
	for(i=-1; i>-1*rangeFactor; i--){
		const before = moveDate(date, i, standardFormat);
		if(range === 'week'){ 
			if(!pushOnCondition(daysInTargetRange, before, 2, targetParam))
				break;
		} else if(range === 'month'){
			if(!pushOnCondition(daysInTargetRange, before, 1, targetParam))
				break;
		} else if(range === 'year'){
			if(!pushOnCondition(daysInTargetRange, before, 0, targetParam))
				break;
		}
	}
	daysInTargetRange.sort(recordsComparator);

	//fill in the weight field per the records
    let foundRecords = [];
	for(record of records){
        if(range === 'week'){
        	if(pushRecordsOnCondition(record, targetParam, 2, foundRecords) === 1)
        		break;
        } else if(range === 'month'){
        	if(pushRecordsOnCondition(record, targetParam, 1, foundRecords) === 1)
        		break;
        } else if(range === 'year'){
        	if(pushRecordsOnCondition(record, targetParam, 0, foundRecords) === 1)
        		break;
        }
	}
	loadRecords(foundRecords, daysInTargetRange);
	return daysInTargetRange;
}

//populate the foundRecords array by examining whether rec satisfies the given precision wrt target date,
//return 0 if could push in,  -1 if rec is not large enough, 1 if rec is larger than needed
function pushRecordsOnCondition(rec, targetParam, precision, foundRecords){
	const recWeek = moment(record.date).week();
	const recMonth  = moment(record.date).month();
	const recYear = moment(record.date).year();
	const recParam = [recYear, recMonth, recWeek];
	if(precision!=2){
        for(j=0; j<= precision; j++)
		    if(recParam[j] != targetParam[j])
			    return (recParam[j] < targetParam[j])? -1: 1;
	}   else {
		if(recParam[0] != targetParam[0]) 
			return (recParam[0] < targetParam[0])? -1: 1;
		if(recParam[2] != targetParam[2]) 
			return (recParam[2] < targetParam[2])? -1: 1;
	}
	foundRecords.push(rec);
	return 0;
}

function pushOnCondition(daysInTargetRange, testDate, precision, targetParam){
	const dateParam = [moment(testDate).year(), moment(testDate).month(), moment(testDate).week()];
	if(precision!=2){
        for(j=0; j<= precision; j++)
    	    if(dateParam[j] != targetParam[j]) return false;
	}  else if(dateParam[0] != targetParam[0] || dateParam[2] != targetParam[2]) return false;
    daysInTargetRange.push({date: testDate, weight: null});
    return true;
}

/*both src and target goes from higher date to lower, src is a subset
of target*/
function loadRecords(src, target){
	i=0; j=0;
	// console.log(src);
	// console.log(target);
	while(i<src.length){
        if(src[i].date === target[j].date){
        	target[j].weight = src[i].weight;
        	i++; 
        }
        j++;
	}
}

function current(){
	return moment().format(standardFormat);
}

/*finds an array of training data based on how far it is from the present*/
function traceBack(targetDate, timeFrame, num){
	const anchor = moment(targetDate,'YYYY/MM/DD').add(-1*num, timeFrame).format(standardFormat);
    return findRange(anchor, timeFrame);
}

function flickPlot(targetDate, timeFrame, num){
	const history = traceBack(targetDate, timeFrame, num);
	let dates = [], weights = [];
	history.forEach(function(dailyRecord){
		dates.push(dailyRecord.date);
		weights.push(dailyRecord.weight);
	});
	// drawPlot(dates, weights);
	displayChart.data.labels = dates;
	displayChart.data.datasets[0].data = weights;
	console.log(dates);
	console.log(weights);
	displayChart.update();
}

</script>
<%- include("partials/footer") %>